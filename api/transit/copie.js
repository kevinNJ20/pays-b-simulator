// ============================================================================
// MALI - API R√©ception Copie Transit √âTAPE 11
// Fichier: api/transit/copie.js
// R√©ception de la d√©claration transit depuis Kit MuleSoft (√©tapes 10-11)
// ============================================================================

const database = require('../../lib/database');

module.exports = async (req, res) => {
  // Configuration CORS
  res.setHeader('Access-Control-Allow-Origin', '*');
  res.setHeader('Access-Control-Allow-Methods', 'POST, OPTIONS');
  res.setHeader('Access-Control-Allow-Headers', 'Content-Type, X-Source-Country, X-Source-System, X-Correlation-ID');

  if (req.method === 'OPTIONS') {
    res.status(200).end();
    return;
  }

  if (req.method === 'POST') {
    try {
      console.log('üöõ [MALI] √âTAPE 11 TRANSIT : R√©ception copie d√©claration transit depuis Kit');
      console.log('üìã [MALI] Donn√©es re√ßues:', JSON.stringify(req.body, null, 2));
      
      const { transit_original, marchandises, instructions_mali, metadata } = req.body;
      
      // Validation
      if (!transit_original || !transit_original.numero_declaration) {
        return res.status(400).json({
          status: 'ERROR',
          message: 'Num√©ro de d√©claration transit requis',
          timestamp: new Date().toISOString()
        });
      }

      // ‚úÖ √âTAPE 11 : Enregistrer la d√©claration transit au Mali
      const donneesTransit = {
        numeroDeclaration: transit_original.numero_declaration,
        paysDepart: transit_original.pays_depart || 'SEN',
        bureauDepart: transit_original.bureau_depart,
        dateCreation: transit_original.date_creation,
        transporteur: transit_original.transporteur,
        itineraire: transit_original.itineraire,
        delaiRoute: transit_original.delai_route,
        marchandises: marchandises || [],
        
        // M√©tadonn√©es du Kit
        correlationId: metadata?.correlation_id,
        etapeWorkflow: 11,
        workflowType: 'TRANSIT'
      };

      const declarationTransit = database.recevoirDeclarationTransit(donneesTransit);
      
      console.log(`‚úÖ [MALI] √âTAPE 11 TERMIN√âE : Transit ${declarationTransit.id} enregistr√©`);
      console.log(`‚è≥ [MALI] ATTENTE : Arriv√©e effective des marchandises (√âTAPE 13)`);

      // ‚úÖ R√©ponse √âTAPE 11
      const reponse = {
        status: 'SUCCESS',
        message: '‚úÖ √âTAPE 11 MALI TERMIN√âE - D√©claration transit re√ßue et enregistr√©e',
        
        paysTraitement: {
          code: 'MLI',
          nom: 'Mali',
          ville: 'Bamako',
          role: 'PAYS_DESTINATION'
        },
        
        transit: {
          id: declarationTransit.id,
          numeroDeclaration: declarationTransit.numeroDeclarationTransit,
          paysDepart: declarationTransit.paysDepart,
          transporteur: declarationTransit.transporteur,
          itineraire: declarationTransit.itineraire,
          delaiRoute: declarationTransit.delaiRoute,
          dateReception: declarationTransit.dateReception,
          statut: declarationTransit.statut,
          etapeWorkflow: 11
        },
        
        workflow: {
          etapeTerminee: 11,
          etapeDescription: 'R√©ception et enregistrement d√©claration transit au Mali',
          prochaine_etape: '13: Arriv√©e marchandises au bureau Mali',
          instructions: instructions_mali,
          modeTraitement: 'MANUEL',
          estimationArrivee: declarationTransit.attenduLe
        },
        
        instructions: [
          '‚úÖ √âTAPE 11 termin√©e - Transit enregistr√© au Mali',
          'üöõ Marchandises en cours de transport vers Bamako',
          '‚è≥ Attente arriv√©e effective au bureau des douanes Mali',
          'üìç √âTAPE 13: Contr√¥les physiques + Visa √† l\'arriv√©e',
          'üì§ √âTAPE 14: Envoi message arriv√©e vers Kit MuleSoft'
        ],
        
        timestamp: new Date().toISOString(),
        correlationId: metadata?.correlation_id || `MALI_TRANSIT_${Date.now()}`
      };

      res.status(200).json(reponse);
      
    } catch (error) {
      console.error('‚ùå [MALI] Erreur √âTAPE 11 transit:', error);
      
      res.status(500).json({
        status: 'ERROR',
        message: 'Erreur lors de la r√©ception de la d√©claration transit au Mali',
        erreur: error.message,
        paysTraitement: {
          code: 'MLI',
          nom: 'Mali',
          ville: 'Bamako'
        },
        timestamp: new Date().toISOString()
      });
    }
  } else {
    res.status(405).json({ 
      status: 'ERROR',
      message: 'M√©thode non autoris√©e',
      methodesAutorisees: ['POST', 'OPTIONS'],
      paysTraitement: 'Mali - Bamako'
    });
  }
};